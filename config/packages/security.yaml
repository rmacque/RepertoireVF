security:
    #encoders:
    #    Symfony\Component\Security\Core\User\User: auto
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        users_in_memory: 
            memory:
                users:
                    #admin: { password: '$2y$13$5KVsuUy66J7IL257B2WioexCQ80gago3r15dgtBU/ue/I0g.DAk4m', roles:['ROLE_ADMIN'] }
                    admin@admin.fr: { password: '$2y$13$4qw8NtRfYPZDjPCCc9TToeABK7vZXTCmbBILxQrmDHf3itupOpUsW', roles:['ROLE_ADMIN'] } #passwd:'admin'
                    da@da.fr: { password: '$2y$13$vJxpJhqVuX615ps.kk4UROkjVuP5DaOaPBBjBuPqKCjkdVqm1/ip.', roles:['ROLE_DIRECTEUR_ARTISTIQUE'] } #passwd:'da'
                    com@com.fr : { password: '$2y$13$HNF1GgydE7f/7D20u8MOhOy0hWBU1.zWYx418Gx33S6n/PsY47eXO', roles:['ROLE_COMEDIEN'] } #passwd:'com'
        #app_user_provider:
            #entity:
                #class: App\Entity\User
                #property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #- { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/oeuvre/new, roles: ROLE_DIRECTEUR_ARTISTIQUE }
        - { path: ^/oeuvre/[0-10000]/edit, roles: ROLE_DIRECTEUR_ARTISTIQUE }
        - { path: ^/comedien/new, roles: ROLE_ADMIN }
        - { path: ^/comedien/[0-10000]/edit, roles: ROLE_COMEDIEN }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: ROLE_DIRECTEUR_ARTISTIQUE
        ROLE_DIRECTEUR_ARTISTIQUE: ROLE_COMEDIEN

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
